#!/bin/sh

source /usr/lib/slitaz/libtaz
source_lib commons
check_root
. /etc/slitaz/slitaz.conf

. /etc/local-mirror.conf

VERSION="0.1"
COMMAND="$1"

usage() {
	echo "$0 $VERSION"
	echo "$0 [on|off|update-repos|tank-only|mirror-only]"
	echo "$0 [backup-mirror|up-src-links]"
	exit 1 
}

#[ -d /mnt/live/memory/mirror/packages ] && PKGDIR="/mnt/live/memory/mirror/packages"
#[ -d /mnt/live/memory/mirror/src ] && SRCDIR="/mnt/live/memory/mirror/src"
sync_mirror=$(find /mnt/live -name "mirror" -type d -maxdepth 3 | head -1)

COOKORDER="$(find /mnt/live/mnt/* -name "cookorder.list" -maxdepth 1)"
CUR_PWD="$PWD"

[ -d $SLITAZ_DIR ] || mkdir -p $SLITAZ_DIR
[ -d $SLITAZ_DIR/repos ] || ln -sf $REPOS_DIR $SLITAZ_DIR/repos
[ -d $SLITAZ_DIR/repos ] && REPOS_DIR="$SLITAZ_DIR/repos"

#repos folders for website
PEOPLE_WWW_DIR="$REPOS_DIR/slitaz-forge/people"
DOC_WWW_DIR="$REPOS_DIR/slitaz-forge/doc"
PIZZA_WWW_DIR="$REPOS_DIR/slitaz-pizza/php"
BOOT_WWW_DIR="$REPOS_DIR/slitaz-forge/boot"
TANK_WWW_DIR="$REPOS_DIR/slitaz-forge/tank/web"

if [ "$COMMAND" = "tank-only" ]; then
	WWW="${WWW/mirror/}"
	ADDRESS="${ADDRESS/mirror.slitaz.org/}"
	VHOST_FILE="$VHOST_TANK_FILE"
fi

if [ "$COMMAND" = "mirror-only" ]; then
	WWW="${WWW/tank/}"
	ADDRESS="mirror.slitaz.org"
	VHOST_FILE="$VHOST_MIRROR_FILE"
fi

[ -d $REPOS_DIR ] || continue

INCOMING_REPOSITORY="$COOKING/packages-incoming"
CRON_FILE="/var/spool/cron/crontabs/root"

www() {
	b=$1
	[ -d $(dirname $CRON_FILE) ] || mkdir -p $(dirname $CRON_FILE)
	[ -f $CRON_FILE ] || touch $CRON_FILE
	[ -d $MAIN_WWW_DIR ] || mkdir -p $MAIN_WWW_DIR
	[ -L /var/www/vhosts ] || ln -sf $MAIN_WWW_DIR /var/www/vhosts
	
	if [ -d $REPOS_DIR/my-wok ]; then
		REPO_WOK=$REPOS_DIR/my-wok
		if [ -x /usr/bin/hg ]; then
			cd $REPO_WOK
			if [ ! "$(hg branch)" = "cooking" ]; then
				hg update cooking
			fi
			cd $CUR_PWD
		fi
	elif [ -d $REPOS_DIR/wok ]; then
		REPO_WOK=$REPOS_DIR/wok
	fi
	[ -d $STABLE ] || mkdir -p $STABLE
	[ -d $COOKING ] || mkdir -p $COOKING

	case "$b" in
		website)
			[ -d $REPOS_DIR/$b ] && ln -s $REPOS_DIR/$b $MAIN_WWW_DIR
			if [ -f $MAIN_WWW_DIR/$b/libs/get-latest.sh ]; then
					# run it here on first run
					$MAIN_WWW_DIR/$b/libs/get-latest.sh
				if [ ! $(grep -l "$MAIN_WWW_DIR/$b/libs/get-latest.sh" $CRON_FILE) ]; then
					echo "#Update SliTaz stuff" >> $CRON_FILE
					echo "*/20 * * * * $MAIN_WWW_DIR/$b/libs/get-latest.sh" >> $CRON_FILE
				fi
			fi
		;;
		people)
			[ -d $REPOS_DIR/slitaz-forge/people ] && ln -s $REPOS_DIR/slitaz-forge/people $MAIN_WWW_DIR/people
		;;
		doc)
			[ -d $DOC_WWW_DIR ] && cp -a $DOC_WWW_DIR $MAIN_WWW_DIR/doc
			[ -d /var/www/dokuwiki ] && cp -a /var/www/dokuwiki/* $MAIN_WWW_DIR/doc
			VAR="index meta media pages"
			for i in $VAR; do
				[ -d $REPOS_DIR/slitaz-doc-wiki-data ] && cp -a $REPOS_DIR/slitaz-doc-wiki-data/$i $MAIN_WWW_DIR/doc/data
			done
			[ -d $REPOS_DIR/slitaz-doc-wiki-data/plugins ] && cp -a $REPOS_DIR/slitaz-doc-wiki-data/plugins  $MAIN_WWW_DIR/doc/lib
			chown root.root -R $MAIN_WWW_DIR/doc
			chmod 777 -R $MAIN_WWW_DIR/doc
		;;
		bugs)
			[ -d $SLITAZ_DIR/bugs ] || mkdir -p $SLITAZ_DIR/bugs
			[ -d $MAIN_WWW_DIR/bugs ] || mkdir -p $MAIN_WWW_DIR/bugs
			[ -d $REPOS_DIR/slitaz-forge/bugs ] && cp -a $REPOS_DIR/slitaz-forge/bugs/roundup.wsgi $SLITAZ_DIR/bugs/roundup.wsgi
			[ -d $REPOS_DIR/slitaz-forge/bugs ] && cp -a $REPOS_DIR/slitaz-forge/bugs/server.ini $SLITAZ_DIR/bugs/server.ini
			[ -d $REPOS_DIR/slitaz-forge/bugs/templates/slitaz ] && cp -a $REPOS_DIR/slitaz-forge/bugs/templates/slitaz/* $SLITAZ_DIR/bugs
			[ -f /usr/share/roundup/cgi-bin/roundup.cgi ] && ln -sf /usr/share/roundup/cgi-bin/roundup.cgi $MAIN_WWW_DIR/bugs/roundup.cgi
		;;
		pizza)
			[ -d $PIZZA_WWW_DIR ] && ln -sf $PIZZA_WWW_DIR $MAIN_WWW_DIR/pizza
		;;
		bb)
			[ -d /usr/share/slitaz/web-bb ] && cp -a /usr/share/slitaz/web-bb $MAIN_WWW_DIR/bb
			#[ -d /usr/share/slitaz/web ] && cp -a /usr/share/slitaz/web $MAIN_WWW_DIR/bb/web
			[ -d $REPOS_DIR/website/images ] && ln -sf $REPOS_DIR/website/images $MAIN_WWW_DIR/bb/images
			[ -d $INCOMING_REPOSITORY ] || mkdir -p $INCOMING_REPOSITORY
			[ -f $INCOMING_REPOSITORY/packages.desc ] || touch $INCOMING_REPOSITORY/packages.desc
			[ -f $INCOMING_REPOSITORY/packages.equiv ] || touch $INCOMING_REPOSITORY/packages.equiv
			[ -f $INCOMING_REPOSITORY/packages.list ] || touch $INCOMING_REPOSITORY/packages.list
			[ -f $INCOMING_REPOSITORY/packages.md5 ] || touch $INCOMING_REPOSITORY/packages.md5
			[ -f $INCOMING_REPOSITORY/packages.txt ] || touch $INCOMING_REPOSITORY/packages.txt
			[ -d $PKGDIR ] && ln -sf $PKGDIR $COOKING/packages
			[ -d $SRCDIR ] && ln -sf $SRCDIR $COOKING/src
			if [ "$CUSTOM_WOK" = "yes" ]; then
				tazwok gen-wok-db --WOK=$REPO_WOK
				if [ -f $COOKORDER ]; then
					[ -d $COOKING/wok ] || mkdir -p $COOKING/wok
					[ -d $COOKING/clean-wok ] || mkdir -p $COOKING/clean-wok
					cat $COOKORDER | while read pkg; do
						rwanted=$(grep $'\t'$pkg$ $INCOMING_REPOSITORY/wok-wanted.txt | cut -f 1)
						for i in $rwanted; do
							[ -f $COOKING/clean-wok/$i/receipt ] || cp -a $REPO_WOK/$i $COOKING/clean-wok/$i
							[ -f $COOKING/wok/$i/receipt ] || cp -a $REPO_WOK/$i $COOKING/wok/$i
						done
						[ -f $COOKING/clean-wok/$pkg/receipt ] || cp -a $REPO_WOK/$pkg $COOKING/clean-wok/$pkg
						[ -f $COOKING/wok/$pkg/receipt ] || cp -a $REPO_WOK/$pkg $COOKING/wok/$pkg
					done
					unset i
					tazwok gen-wok-db --WOK=$COOKING/clean-wok
				fi
			else
				[ -d $COOKING/clean-wok ] || ln -sf $REPO_WOK $COOKING/clean-wok
				[ -d $COOKING/wok ] || ln -sf $REPO_WOK $COOKING/wok
			fi
			[ -d $STABLE/clean-wok ] || ln -sf $REPOS_DIR/wok-stable $STABLE/clean-wok
			[ -d $STABLE/wok ] || ln -sf $REPOS_DIR/wok-stable $STABLE/wok
			[ -f $SRCDIR/sources.list ] || tazwok gen-src $SRCDIR --WOK=$REPO_WOK
			[ -d $REPOS_DIR/slitaz-modular ] && ln -sf $REPOS_DIR/slitaz-modular $COOKING/slitaz-modular
			echo -e "$MAIN_WWW_DIR/bb" | tazwok webserver on
		;;
		pkgs)
			[ -d $MAIN_WWW_DIR/pkgs ] || mkdir -p $MAIN_WWW_DIR/pkgs
		
			#[ -d /var/lib/tazpkg-web/style ] && cp -a /var/lib/tazpkg-web/style/* $MAIN_WWW_DIR/pkgs
			#[ -f /var/lib/tazpkg-web/search.cgi ] && cp -a /var/lib/tazpkg-web/search.cgi $MAIN_WWW_DIR/pkgs
			[ -d $REPOS_DIR/slitaz-dev-tools/tazpkg-web/style ] && cp -a $REPOS_DIR/slitaz-dev-tools/tazpkg-web/style/* $MAIN_WWW_DIR/pkgs
			[ -f $REPOS_DIR/slitaz-dev-tools/tazpkg-web/search.cgi ] && cp -a $REPOS_DIR/slitaz-dev-tools/tazpkg-web/search.cgi $MAIN_WWW_DIR/pkgs
			[ -d $COOKING ] || mkdir -p $COOKING
			[ -d $STABLE ] || mkdir -p $STABLE
			[ -d $REPOS_DIR/flavors ] && ln -sf $REPOS_DIR/flavors $COOKING/flavors
			[ -d $REPOS_DIR/flavors-stable ] && ln -sf $REPOS_DIR/flavors-stable $STABLE/flavors
			#[ -d $COOKING/wok ] || ln -sf $REPOS_DIR/wok $COOKING/clean-wok
			[ -d $STABLE/clean-wok ] || ln -sf $REPOS_DIR/wok-stable $STABLE/clean-wok
			if [ -f "/usr/bin/tazpkg-web" ]; then
				tazpkg-web cooking
				if [ ! $(grep -l "/usr/bin/tazpkg-web cooking" $CRON_FILE) ]; then
					echo "# Update pkgs.slitaz.org pages" >> $CRON_FILE
					echo "20 02 * * * /usr/bin/tazpkg-web cooking" >> $CRON_FILE
				fi
			fi
		;;
		mirror)
			[ -d $REPOS_DIR/slitaz-dev-tools/mirror-tools/mirror-info ] && cp -a $REPOS_DIR/slitaz-dev-tools/mirror-tools/mirror-info $MAIN_WWW_DIR
			[ -d $REPOS_DIR/slitaz-dev-tools/mirror-tools/slitaz ] && cp -a $REPOS_DIR/slitaz-dev-tools/mirror-tools/slitaz $MAIN_WWW_DIR
			[ -d $MAIN_WWW_DIR/slitaz/mirror/packages ] || mkdir -p $MAIN_WWW_DIR/slitaz/mirror/packages
			[ -d $PKGDIR ] && ln -sf $PKGDIR $MAIN_WWW_DIR/slitaz/mirror/packages/$(cat /etc/slitaz-release)
			if [ -d $SRCDIR ]; then
				for i in $(ls $SRCDIR); do
					[ -d $MAIN_WWW_DIR/slitaz/mirror/sources/packages/${i:0:1} ] || mkdir -p $MAIN_WWW_DIR/slitaz/mirror/sources/packages/${i:0:1}
					[ -f $MAIN_WWW_DIR/slitaz/mirror/sources/packages/${i:0:1}/$i ] || ln -s $SRCDIR/$i $MAIN_WWW_DIR/slitaz/mirror/sources/packages/${i:0:1}/$i
				done
				unset i
			fi
			[ -d /var/www/slitaz ] || ln -sf $MAIN_WWW_DIR/slitaz /var/www/slitaz
		;;
		boot)
			[ -d $BOOT_WWW_DIR ] && cp -a $BOOT_WWW_DIR $MAIN_WWW_DIR/$b
			#[ -d $REPOS_DIR/website/pics ] && ln -sf $REPOS_DIR/website/images $MAIN_WWW_DIR/$b/images
		;;
		tank)
			[ -d $TANK_WWW_DIR ] && ln -sf $TANK_WWW_DIR $MAIN_WWW_DIR/$b
			[ -f /usr/share/awstats/extras/update ] && ln -sf /usr/share/awstats/extras/update /usr/sbin/awsupdate_all
			[ -d $REPOS_DIR/slitaz-forge/$b/files/etc/awstats ] && cp -a $REPOS_DIR/slitaz-forge/$b/files/etc/awstats/* /etc/awstats
			for i in $ADDRESS; do
				if [ -f /etc/awstats/awstats.$i.conf ]; then
					dirlog=$(grep ^DirData= /etc/awstats/awstats.$i.conf | cut -d "=" -f2 | sed -e 's/"//g')
					mkdir -p $dirlog
				fi
			done
			if [ -f /usr/share/awstats/extras/update ]; then
				if [ ! $(grep -l "/usr/share/awstats/extras/update" $CRON_FILE) ]; then
					echo "# Update Web stats" >> $CRON_FILE
					echo "*/5 * * * * /usr/share/awstats/extras/update" >> $CRON_FILE
				fi
			fi
			if [ -f $MAIN_WWW_DIR/tank/bin/makegraphs ]; then
				if [ ! $(grep -l "$MAIN_WWW_DIR/tank/bin/makegraphs" $CRON_FILE) ]; then
					echo "# Update system load graphics" >> $CRON_FILE
					echo "*/5 * * * * $MAIN_WWW_DIR/tank/bin/makegraphs" >> $CRON_FILE
				fi
			fi
		;;
		hg)
			[ -d $MAIN_WWW_DIR/hg ] || mkdir -p $MAIN_WWW_DIR/hg
			[ -f /usr/share/examples/mercurial/hgwebdir.cgi ] && cp -a /usr/share/examples/mercurial/hgwebdir.cgi $MAIN_WWW_DIR/hg
			[ -f $REPOS_DIR/slitaz-forge/tank/files/etc/mercurial/hgweb.config ] && cp -a $REPOS_DIR/slitaz-forge/tank/files/etc/mercurial/hgweb.config /etc/mercurial/hgweb.config
			#[ -f /etc/mercurial/hgweb.conf ] && sed -i 's|style = slitaz|style = gitweb|g' /etc/mercurial/hgweb.config
		;;
		lfs)
			[ -d $MAIN_WWW_DIR/lfs ] || ln -sf /usr/share/doc/lfs-book $MAIN_WWW_DIR/lfs
		;;
	esac
}

repos() {
	for repo in $REPOS; do
		[ -d $REPOS_DIR/$repo ] || continue
		if [ -d $REPOS_DIR/$repo/.hg ]; then
			mkdir -p $REPOS_WEB_DIR/$repo
			[ -d $REPOS_WEB_DIR/$repo/.hg ] || ln -s $REPOS_DIR/$repo/.hg $REPOS_WEB_DIR/$repo/.hg
			if [ ! $(grep -l "$REPOS_WEB_DIR" /etc/mercurial/hgweb.config) ]; then
				[ -f /etc/mercurial/hgweb.config ] && sed -i "s|$REPOS_DIR|$REPOS_WEB_DIR|g" /etc/mercurial/hgweb.config
			fi
		fi
		if [ ! -f $REPOS_DIR/$repo/.hg/hgrc-web ]; then
			touch $REPOS_DIR/$repo/.hg/hgrc-web
			cat "$REPOS_DIR/$repo/.hg/hgrc" >> $REPOS_DIR/$repo/.hg/hgrc-web
			echo "[web]" >> $REPOS_DIR/$repo/.hg/hgrc-web
			#[ -d $REPOS_DIR/$repo/.hg ] && echo "style = slitaz" >> $REPOS_DIR/$repo/.hg/hgrc-web
			echo "staticurl = http://hg.slitaz.org/static/" >> $REPOS_DIR/$repo/.hg/hgrc-web
			echo "push_ssl = false" >> $REPOS_DIR/$repo/.hg/hgrc-web
			echo "allow_push = *" >> $REPOS_DIR/$repo/.hg/hgrc-web
			#[ ! -f $REPOS_DIR/$repo/.hg/hgrc-pull ] && mv $REPOS_DIR/$repo/.hg/hgrc $REPOS_DIR/$repo/.hg/hgrc-pull
			cp -a $REPOS_DIR/$repo/.hg/hgrc-web $REPOS_DIR/$repo/.hg/hgrc
		fi
	
		if [ ! $(grep -l 'name = ' $REPOS_DIR/$repo/.hg/hgrc ) ]; then
			echo "name = $repo" >> $REPOS_DIR/$repo/.hg/hgrc
		fi
	
		if [ ! $(grep -l 'contact = ' $REPOS_DIR/$repo/.hg/hgrc ) ]; then
			[ "$repo" = "cookutils" ] && echo "contact = Christophe Lincoln" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "flavors" ] && echo "contact = Christophe Lincoln" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "flavors-stable" ] && echo "contact = Pascal Bellard" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "my-wok" ] && echo "contact = Christopher Rogers" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "slitaz-base-files" ] && echo "contact = Pascal Bellard" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "slitaz-boot-scripts" ] && echo "contact = Christophe Lincoln" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "slitaz-configs" ] && echo "contact = Christophe Lincoln" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "slitaz-dev-tools" ] && echo "contact = Christophe Lincoln" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "slitaz-doc" ] && echo "contact = Christophe Lincoln" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "slitaz-doc-wiki-data" ] && echo "contact = Christopher Rogers" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "slitaz-forge" ] && echo "contact = Eric Joseph-Alexandre" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "slitaz-modular" ] && echo "contact = Christopher Rogers" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "slitaz-pizza" ] && echo "contact = Pascal Bellard" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "slitaz-tools" ] && echo "contact = Christophe Lincoln" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "slitaz-vz" ] && echo "contact = Eric Joseph-Alexandre" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "tazlito" ] && echo "contact = Pascal Bellard" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "tazpanel" ] && echo "contact = Christophe Lincoln" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "tazpkg" ] && echo "contact = Christophe Lincoln" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "tazusb" ] && echo "contact = Eric Joseph-Alexandre" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "tazwok" ] && echo "contact = Christophe Lincoln" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "website" ] && echo "contact = Christophe Lincoln" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "wok" ] && echo "contact = Christophe Lincoln" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "wok-stable" ] && echo "contact = Christophe Lincoln" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "wok-tiny" ] && echo "contact = Pascal Bellard" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "wok-undigest" ] && echo "contact = Christophe Lincoln" >> $REPOS_DIR/$repo/.hg/hgrc
		fi
	
		if [ ! $(grep -l 'description = ' $REPOS_DIR/$repo/.hg/hgrc) ]; then
			[ "$repo" = "cookutils" ] && echo "description = Utils to cook SliTaz packages" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "flavors" ] && echo "description = SliTaz Cooking flavors" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "flavors-stable" ] && echo "description = SliTaz Stable flavors" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "slitaz-base-files" ] && echo "description = SliTaz base files" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "slitaz-boot-scripts" ] && echo "description = SliTaz boot scripts" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "slitaz-configs" ] && echo "description = SliTaz configuration files" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "slitaz-dev-tools" ] && echo "description = SliTaz Developers Tools" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "slitaz-doc" ] && echo "description = SliTaz system doc" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "slitaz-doc-wiki-data" ] && echo "description = SliTaz documentation wiki content" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "slitaz-forge" ] && echo "description = SliTaz Forge Config" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "slitaz-modular" ] && echo "description = Scripts to make SliTaz Modular" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "slitaz-pizza" ] && echo "description = SliTaz Online flavor builder" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "slitaz-tools" ] && echo "description = SliTaz Tools and Tinyutils" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "slitaz-vz" ] && echo "description = SliTaz OpenVZ integration" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "tazlito" ] && echo "description = SliTaz Live Tool" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "tazpanel" ] && echo "description = Slitaz Administration Panel" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "tazpkg" ] && echo "description = SliTaz Packages manager" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "tazusb" ] && echo "description = SliTaz LiveUSB utility" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "tazwok" ] && echo "description = SliTaz Packages builder" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "website" ] && echo "description = SliTaz Website" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "wok" ] && echo "description = SliTaz Cooking wok" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "wok-stable" ] && echo "description = SliTaz Stable wok" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "wok-tiny" ] && echo "description = Tiny SliTaz wok" >> $REPOS_DIR/$repo/.hg/hgrc
			[ "$repo" = "wok-undigest" ] && echo "description = SliTaz Undigest wok" >> $REPOS_DIR/$repo/.hg/hgrc
		fi
	done
}

case "$COMMAND" in 
	start|on|tank-only|mirror-only)
		[ -d $MAIN_WWW_DIR/mirror-info ] && WWW="${WWW/mirror /}"
		for c in $WWW; do
			if [ ! -d $MAIN_WWW_DIR/$c ]; then
				www $c
				[ "$c" = "hg" ] && repos
			fi
		done
		echo "127.0.0.1 localhost $(cat /etc/hostname)" > /etc/hosts
		[ "$IP_ADDR" == "127.0.0.1" ] && echo "127.0.0.1 tazpanel tazpanel.slitaz.org" >> /etc/hosts
		for hostname in $ADDRESS; do 
				if [ "$hostname" = "www.slitaz.org" ]; then
					echo "$IP_ADDR $hostname slitaz.org" >> /etc/hosts
				else
					echo "$IP_ADDR $hostname" >> /etc/hosts
				fi
		done		
		if [ "$IP_ADDR" != "127.0.0.1" ]; then
			if [ ! $(grep -l "dhcp-option=option:router,$ROUTER_IP" /etc/dnsmasq.conf) ]; then
				echo "$IP_ADDR tazpanel tazpanel.slitaz.org" >> /etc/hosts
				echo "dhcp-option=option:router,$ROUTER_IP" >> /etc/dnsmasq.conf
			fi
		fi
		echo "$PKGDIR" > $LOCALSTATE/mirror
		if [ "$COMMAND" = "tank-only" ]; then
			[ -f $VHOST_TANK_FILE ] && ln -sf $VHOST_TANK_FILE /etc/lighttpd/vhosts.conf
		elif [ "$COMMAND" = "mirror-only" ]; then
			[ -f $VHOST_MIRROR_FILE ] && ln -sf $VHOST_MIRROR_FILE /etc/lighttpd/vhosts.conf
		else
			[ -f $VHOST_FILE ] && ln -sf $VHOST_FILE /etc/lighttpd/vhosts.conf
		fi
		chown -R www.www $SLITAZ_DIR/www
		[ -x /etc/init.d/lighttpd ] && /etc/init.d/lighttpd start
		[ -x /etc/init.d/crond ] && /etc/init.d/crond start
		;;
	update-repos)
		pwd=$(pwd)
		for i in $(ls $REPOS_DIR); do
			if [ -d $REPOS_DIR/$i/.hg ]; then
				cd $REPOS_DIR/$i
				echo "Updaing $i repo..."
				hg pull -u
			fi
		done
		cd $pwd
		;;
	up-src-links)
		if [ -d $SRCDIR ]; then
			[ -d $MAIN_WWW_DIR/slitaz/mirror/sources/packages ] && rm -rf $MAIN_WWW_DIR/slitaz/mirror/sources/packages
			for i in $(ls $SRCDIR); do
				[ -d $MAIN_WWW_DIR/slitaz/mirror/sources/packages/${i:0:1} ] || mkdir -p $MAIN_WWW_DIR/slitaz/mirror/sources/packages/${i:0:1}
				[ -f $MAIN_WWW_DIR/slitaz/mirror/sources/packages/${i:0:1}/$i ] || ln -sf $SRCDIR/$i $MAIN_WWW_DIR/slitaz/mirror/sources/packages/${i:0:1}/$i
			done
			unset i
		fi
		;;
	backup-mirror|-bm)
		case "$2" in
			pkgs-dry-push)
				rsync -avrtlz --delete --dry-run $PKGDIR ${sync_mirror} ;;
			src-dry-push)
				rsync -avrtlz --delete --dry-run $SRCDIR ${sync_mirror} ;;
			repos-dry-push)
				rsync -avrtlz --delete --dry-run $REPOS_DIR ${sync_mirror} ;;
			pkgs-push)
				rsync -avrtlz --delete $PKGDIR ${sync_mirror} ;;
			src-push)
				rsync -avrtlz --delete $SRCDIR ${sync_mirror} ;;
			repos-push)
				rsync -avrtlz --delete $REPOS_DIR ${sync_mirror} ;;
			pkgs-dry-pull)
				rsync -avrtlz --delete --dry-run ${sync_mirror}${PKGDIR} $(dirname ${PKGDIR}) ;;
			src-dry-pull)
				rsync -avrtlz --delete --dry-run ${sync_mirror}${SRCDIR} $(dirname ${SRCDIR}) ;;
			repos-dry-pull)
				rsync -avrtlz --delete --dry-run ${sync_mirror}${REPOS_DIR} $(dirname ${REPOS_DIR}) ;;
			pkgs-pull)
				rsync -avrtlz --delete ${sync_mirror}${PKGDIR} $(dirname ${PKGDIR}) ;;
			src-pull)
				rsync -avrtlz --delete ${sync_mirror}${SRCDIR} $(dirname ${SRCDIR}) ;;
			repos-pull)
				rsync -avrtlz --delete ${sync_mirror}${REPOS_DIR} $(dirname ${REPOS_DIR}) ;;
			*)
				echo "$0 backup-mirror pkgs-dry-{push|pull}"
				echo "$0 backup-mirorr pkgs-{push|pull}"
				echo "$0 backup-mirror src-dry-{push|pull}"
				echo "$0 backup-mirror src-{push|pull}"
				echo "$0 backup-mirror repos-dry-{push|pull}"
				echo "$0 backup-mirror repos-{push|pull}" ;;
		esac ;;
	off)
		[ -x /etc/init.d/lighttpd ] && /etc/init.d/lighttpd stop
		[ -x /etc/init.d/crond ] && /etc/init.d/crond stop
		echo "127.0.0.1 localhost $(cat /etc/hostname) tazpanel" > /etc/hosts
		exit 1
		;;
	*)
		usage
		;;
esac
