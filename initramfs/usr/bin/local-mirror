#!/bin/sh

source /lib/libtaz.sh
check_root
. /etc/slitaz/slitaz.conf

. /etc/local-mirror.conf

COMMAND="$1"
VERSION="0.1"
usage() {
	echo "$0 $VERSION"
	echo "$0 [on|off|update-repos|tank-only|mirror-only]"
	echo "$0 [backup-mirror|up-src-links]"
	exit 1 
}

#[ -d /mnt/live/memory/mirror/packages ] && PKGDIR="/mnt/live/memory/mirror/packages"
#[ -d /mnt/live/memory/mirror/src ] && SRCDIR="/mnt/live/memory/mirror/src"
sync_mirror=$(find /mnt/live -maxdepth 3 -name "mirror" -type d | head -1)

COOKORDER="$(find /mnt/live/mnt/* -maxdepth 1 -name "cookorder.list")"
CUR_PWD="$PWD"
version="$SLITAZ_RELEASE"

[ -d $SLITAZ_HOME/$version ] || mkdir -p $SLITAZ_HOME/$version
[ -d $SLITAZ_HOME/repos ] || ln -sf $REPOS_DIR $SLITAZ_HOME/repos
[ -d $SLITAZ_HOME/repos ] && REPOS_DIR="$SLITAZ_HOME/repos"
PYTHON_LIB="/usr/lib/python2.7"

if [ -d $PKGDIR ]; then
	[ -d $SLITAZ_HOME/$version/packages ] || ln -sf $PKGDIR $SLITAZ_HOME/$version/packages
	[ -d $SLITAZ_HOME/packages ] || ln -sf $PKGDIR $SLITAZ_HOME/packages
fi
if [ -d $SRCDIR ]; then
	[ -d $SLITAZ_HOME/$version/src ] || ln -sf $SRCDIR $SLITAZ_HOME/$version/src
	[ -d $SLITAZ_HOME/src ] || ln -sf $SRCDIR $SLITAZ_HOME/src
fi

#repos folders for website
PEOPLE_WWW_DIR="$REPOS_DIR/slitaz-forge/people"
MIRROR_WWW_DIR="$REPOS_DIR/slitaz-forge/mirror/root"
MIRROR_INFO_WWW_DIR="$REPOS_DIR/slitaz-forge/mirror/info"
PKGS_WWW_DIR="$REPOS_DIR/slitaz-forge/pkgs"
DOC_WWW_DIR="$REPOS_DIR/slitaz-forge/doc"
PIZZA_WWW_DIR="$REPOS_DIR/slitaz-pizza/php"
BOOT_WWW_DIR="$REPOS_DIR/slitaz-forge/boot"
TANK_WWW_DIR="$REPOS_DIR/slitaz-forge/tank/web"
USBKEY_WWW_DIR="$REPOS_DIR/slitaz-forge/usbkey"
ROADMAP_WWW_DIR="$REPOS_DIR/slitaz-forge/roadmap"
PRO_WWW_DIR="$REPOS_DIR/slitaz-forge/pro"

if [ "$COMMAND" = "tank-only" ]; then
	WWW="${WWW/mirror/}"
	ADDRESS="${ADDRESS/mirror.slitaz.org/}"
	VHOST_FILE="$VHOST_TANK_FILE"
fi

if [ "$COMMAND" = "mirror-only" ]; then
	WWW="${WWW/tank/}"
	ADDRESS="mirror.slitaz.org"
	VHOST_FILE="$VHOST_MIRROR_FILE"
fi

if [ ! -d $PKGDIR ]; then
	WWW="${WWW/pkg/}"
	ADDRESS="${ADDRESS/pkg.slitaz.org}"
fi
[ -d $REPOS_DIR ] || continue

INCOMING_REPOSITORY="$COOKING/packages-incoming"
INCOMING="$SLITAZ_HOME/$version/incoming"
CRON_FILE="/var/spool/cron/crontabs/root"

www() {
	b=$1
	[ -d $(dirname $CRON_FILE) ] || mkdir -p $(dirname $CRON_FILE)
	[ -f $CRON_FILE ] || touch $CRON_FILE
	[ -d $MAIN_WWW_DIR ] || mkdir -p $MAIN_WWW_DIR
	[ -L /var/www/vhosts ] || ln -sf $MAIN_WWW_DIR /var/www/vhosts
	
	if [ -d $REPOS_DIR/wok-tank ]; then
		REPO_WOK=$REPOS_DIR/wok-tank
		if [ -x /usr/bin/hg ]; then
			cd $REPO_WOK
			if [ ! "$(hg branch)" = "cooking" ]; then
				hg update cooking
			fi
			cd $CUR_PWD
		fi
	elif [ -d $REPOS_DIR/wok ]; then
		REPO_WOK=$REPOS_DIR/wok
	fi
	[ -d $STABLE ] || mkdir -p $STABLE
	[ -d $COOKING ] || mkdir -p $COOKING
	[ -d $MAIN_WWW_DIR/graphs/images/rrd ] || mkdir -p $MAIN_WWW_DIR/graphs/images/rrd
	
	case "$b" in
		website)
			#cd $REPOS_DIR/$b
			#hg update testing
			#cd $CUR_DIR
			[ -d $REPOS_DIR/$b ] && ln -s $REPOS_DIR/$b $MAIN_WWW_DIR
			if [ -f $MAIN_WWW_DIR/$b/libs/get-feeds.sh ]; then
				if [ ! $(grep -l "$MAIN_WWW_DIR/$b/libs/get-feeds.sh" $CRON_FILE) ]; then
					echo "#Update SliTaz stuff" >> $CRON_FILE
					echo "*/20 * * * * $MAIN_WWW_DIR/$b/libs/get-feeds.sh" >> $CRON_FILE
				fi
			fi
		;;
		people)
			[ -d $PEOPLE_WWW_DIR ] && ln -s $PEOPLE_WWW_DIR $MAIN_WWW_DIR/people
		;;
		doc)
			[ -d $DOC_WWW_DIR ] && cp -a $DOC_WWW_DIR $MAIN_WWW_DIR/doc
			[ -d /var/www/dokuwiki ] && cp -a /var/www/dokuwiki/* $MAIN_WWW_DIR/doc
			VAR="index attic meta media pages"
			for i in $VAR; do
				[ -d $REPOS_DIR/slitaz-doc-wiki-data ] && cp -a $REPOS_DIR/slitaz-doc-wiki-data/$i $MAIN_WWW_DIR/doc/data
			done
			#[ -d $REPOS_DIR/slitaz-doc-wiki-data/plugins ] && cp -a $REPOS_DIR/slitaz-doc-wiki-data/plugins  $MAIN_WWW_DIR/doc/lib
			chown root.root -R $MAIN_WWW_DIR/doc
			chmod 777 -R $MAIN_WWW_DIR/doc
		;;
		bugs)
			[ -d $SLITAZ_HOME/bugs ] || mkdir -p $SLITAZ_HOME/bugs
			[ -d $MAIN_WWW_DIR/bugs ] || mkdir -p $MAIN_WWW_DIR/bugs
			[ -d $REPOS_DIR/slitaz-forge/bugs ] && cp -a $REPOS_DIR/slitaz-forge/bugs/roundup.wsgi $SLITAZ_HOME/bugs/roundup.wsgi
			[ -d $REPOS_DIR/slitaz-forge/bugs ] && cp -a $REPOS_DIR/slitaz-forge/bugs/server.ini $SLITAZ_HOME/bugs/server.ini
			[ -d $REPOS_DIR/slitaz-forge/bugs/templates/slitaz ] && cp -a $REPOS_DIR/slitaz-forge/bugs/templates/slitaz/* $SLITAZ_HOME/bugs
			[ -f /usr/share/roundup/cgi-bin/roundup.cgi ] && ln -sf /usr/share/roundup/cgi-bin/roundup.cgi $MAIN_WWW_DIR/bugs/roundup.cgi
		;;
		pizza)
			[ -d $PIZZA_WWW_DIR ] && ln -sf $PIZZA_WWW_DIR $MAIN_WWW_DIR/pizza
		;;
		bb)
			[ -d /usr/share/slitaz/web-bb ] && cp -a /usr/share/slitaz/web-bb $MAIN_WWW_DIR/bb
			#[ -d /usr/share/slitaz/web ] && cp -a /usr/share/slitaz/web $MAIN_WWW_DIR/bb/web
			[ -d $REPOS_DIR/website/images ] && ln -sf $REPOS_DIR/website/images $MAIN_WWW_DIR/bb/images
			[ -d $INCOMING_REPOSITORY ] || mkdir -p $INCOMING_REPOSITORY
			[ -f $INCOMING_REPOSITORY/packages.desc ] || touch $INCOMING_REPOSITORY/packages.desc
			[ -f $INCOMING_REPOSITORY/packages.equiv ] || touch $INCOMING_REPOSITORY/packages.equiv
			[ -f $INCOMING_REPOSITORY/packages.list ] || touch $INCOMING_REPOSITORY/packages.list
			[ -f $INCOMING_REPOSITORY/packages.md5 ] || touch $INCOMING_REPOSITORY/packages.md5
			[ -f $INCOMING_REPOSITORY/packages.txt ] || touch $INCOMING_REPOSITORY/packages.txt
			[ -d $PKGDIR ] && ln -sf $PKGDIR $COOKING/packages
			[ -d $SRCDIR ] && ln -sf $SRCDIR $COOKING/src
			if [ "$CUSTOM_WOK" = "yes" ]; then
				tazwok gen-wok-db --WOK=$REPO_WOK
				if [ -f $COOKORDER ]; then
					[ -d $COOKING/wok ] || mkdir -p $COOKING/wok
					[ -d $COOKING/clean-wok ] || mkdir -p $COOKING/clean-wok
					cat $COOKORDER | while read pkg; do
						rwanted=$(grep $'\t'$pkg$ $INCOMING_REPOSITORY/wok-wanted.txt | cut -f 1)
						for i in $rwanted; do
							[ -f $COOKING/clean-wok/$i/receipt ] || cp -a $REPO_WOK/$i $COOKING/clean-wok/$i
							[ -f $COOKING/wok/$i/receipt ] || cp -a $REPO_WOK/$i $COOKING/wok/$i
						done
						[ -f $COOKING/clean-wok/$pkg/receipt ] || cp -a $REPO_WOK/$pkg $COOKING/clean-wok/$pkg
						[ -f $COOKING/wok/$pkg/receipt ] || cp -a $REPO_WOK/$pkg $COOKING/wok/$pkg
					done
					unset i
					tazwok gen-wok-db --WOK=$COOKING/clean-wok
				fi
			else
				[ -d $COOKING/clean-wok ] || ln -sf $REPO_WOK $COOKING/clean-wok
				[ -d $COOKING/wok ] || ln -sf $REPO_WOK $COOKING/wok
			fi
			[ -d $STABLE/clean-wok ] || ln -sf $REPOS_DIR/wok-stable $STABLE/clean-wok
			[ -d $STABLE/wok ] || ln -sf $REPOS_DIR/wok-stable $STABLE/wok
			[ -f $SRCDIR/sources.list ] || tazwok gen-src $SRCDIR --WOK=$REPO_WOK
			[ -d $REPOS_DIR/slitaz-modular ] && ln -sf $REPOS_DIR/slitaz-modular $COOKING/slitaz-modular
			echo -e "$MAIN_WWW_DIR/bb" | tazwok webserver on
		;;
		cook)
			#pwd=$(pwd)
			#if [ -d $REPOS_DIR/my-cookutils ]; then
			#	cd $REPOS_DIR/my-cookutils
			#	if [ "$(hg branch)" != "testing" ]; then
			#		hg update testing
			#	fi
			#	make install
			#	cd $pwd
			#fi
			echo "$SLITAZ_HOME/$version/packages" > $LOCALSTATE/mirror
			[ -d $LOCALSTATE/undigest/incoming ] || mkdir -p $LOCALSTATE/undigest/incoming
			[ -f $LOCALSTATE/undigest/incoming/mirror ] || echo "$INCOMING" > $LOCALSTATE/undigest/incoming/mirror
			echo "incoming" > $LOCALSTATE/priority
			[ -d $SLITAZ_HOME/$version/incoming ] || mkdir -p $SLITAZ_HOME/$version/incoming
			[ -d /var/www/cooker ] && cp -a /var/www/cooker $MAIN_WWW_DIR/$b
			[ -f /usr/share/$b/header.html ] && cp -a /usr/share/$b/header.html $MAIN_WWW_DIR/$b/header.html
			[ -f /etc/slitaz/$b.conf ] && cp -a /etc/slitaz/$b.conf $MAIN_WWW_DIR/$b/$b.conf
			if [ "$MKCHROOT" = "yes" ]; then
				if [ -d $PKGDIR ]; then
					tazpkg recharge
					tazdev gen-chroot $version
					[ -d $SLITAZ_HOME/$version/chroot ] && mkdir -p $SLITAZ_HOME/$version/chroot$(dirname $CRON_FILE)
					[ -d $SLITAZ_HOME/$version/chroot ] && echo "0 */2 * * * /usr/bin/cooker" > $SLITAZ_HOME/$version/chroot${CRON_FILE}
					[ -d $SLITAZ_HOME/$version/chroot ] && echo "$SLITAZ_HOME/$version/packages" > $SLITAZ_HOME/$version/chroot${LOCALSTATE}/mirror
					mkdir -p $SLITAZ_HOME/$version/chroot${LOCALSTATE}/undigest/incoming
					echo "$SLITAZ_HOME/$version/incoming" > $SLITAZ_HOME/$version/chroot${LOCALSTATE}/undigest/incoming/mirror
				fi
			fi
			[ -d $REPOS_DIR/wok-tank ] && ln -sf $REPOS_DIR/wok-tank $SLITAZ_HOME/$version/wok-hg
			#[ -d $REPOS_DIR/wok-tank ] && ln -sf $REPOS_DIR/wok-tank $SLITAZ_HOME/$version/wok
			[ -d $MAIN_WWW_DIR/$b/packages ] || ln -sf $SLITAZ_HOME/$version/packages $MAIN_WWW_DIR/$b/packages
			[ -d $MAIN_WWW_DIR/$b/incoming ] || ln -sf $SLITAZ_HOME/$version/incoming $MAIN_WWW_DIR/$b/incoming
		;;
		try)
			[ -d $MAIN_WWW_DIR/tinycm ] || ln -sf $REPOS_DIR/tinycm $MAIN_WWW_DIR/try ;;
		pkgs)
			pwd=$(pwd)
			if [ -d $PKGS_WWW_DIR ]; then
				cd $PKGS_WWW_DIR
				make install-msg
				cd $pwd
			fi
			[ -d $MAIN_WWW_DIR/pkgs ] || ln -sf $PKGS_WWW_DIR $MAIN_WWW_DIR/pkgs
			[ -d $REPOS_DIR/flavors ] && ln -sf $REPOS_DIR/flavors $COOKING/flavors
		;;
		usbkey)
			[ -d $USBKEY_WWW_DIR ] && ln -sf $USBKEY_WWW_DIR $MAIN_WWW_DIR/usbkey ;;
		pro)
			[ -d $PRO_WWW_DIR ] && ln -sf $PRO_WWW_DIR $MAIN_WWW_DIR/pro ;;
		roadmap)
			[ -d $ROADMAP_WWW_DIR ] && ln -sf $ROADMAP_WWW_DIR $MAIN_WWW_DIR/roadmap ;;
		mirror)
			[ -d $MIRROR_INFO_WWW_DIR ] && cp -a $MIRROR_INFO_WWW_DIR  $MAIN_WWW_DIR/mirror-info
			[ -d $MIRROR_WWW_DIR ] && cp -a $MIRROR_WWW_DIR $MAIN_WWW_DIR/mirror
			[ -d $MAIN_WWW_DIR/mirror/packages ] || mkdir -p $MAIN_WWW_DIR/mirror/packages
			[ -d $PKGDIR ] && ln -sf $PKGDIR $MAIN_WWW_DIR/mirror/packages/$version
			[ -d /var/www/slitaz ] || mkdir -p /var/www/slitaz
			[ -d /var/www/slitaz/mirror ] || ln -sf $MAIN_WWW_DIR/mirror /var/www/slitaz/mirror
			[ -d /var/www/mirror ] || ln -sf $MAIN_WWW_DIR/mirror /var/www/mirror
			[ -d /var/www/mirror-info ] || ln -sf $MAIN_WWW_DIR/mirror-info /var/www/mirror-info
			[ -d $MAIN_WWW_DIR/mirror-info/pics ] || mkdir -p $MAIN_WWW_DIR/mirror-info/pics
			[ -d $MAIN_WWW_DIR/mirror-info/pics/rrd ] || ln -sf $MAIN_WWW_DIR/graphs/images/rrd $MAIN_WWW_DIR/mirror-info/pics/rrd
			[ -f $REPOS_DIR/slitaz-forge/mirror/files/etc/rsyncd.conf ] && cp -a $REPOS_DIR/slitaz-forge/mirror/files/etc/rsyncd.conf /etc/rsyncd.conf
			[ -f $REPOS_DIR/slitaz-forge/mirror/files/etc/rsyncd.motd ] && cp -a $REPOS_DIR/slitaz-forge/mirror/files/etc/rsyncd.motd /etc/rsyncd.motd
			[ -f $REPOS_DIR/slitaz-forge/mirror/files/usr/bin/chkfilelist ] && cp -a $REPOS_DIR/slitaz-forge/mirror/files/usr/bin/chkfilelist /usr/bin/chkfilelist
			if [ -f /usr/bin/makegraphs ]; then
				[ -f $MAIN_WWW_DIR/graphs/makegraphs ] || cp -a /usr/bin/makegraphs $MAIN_WWW_DIR/graphs/makegraphs
				if [ ! $(grep -l "$MAIN_WWW_DIR/graphs/makegraphs" $CRON_FILE) ]; then
					echo "# Update system load graphics" >> $CRON_FILE
					echo "*/5 * * * * $MAIN_WWW_DIR/graphs/makegraphs" >> $CRON_FILE
				fi
			fi
			if [ -f /usr/bin/chkfilelist ]; then
				if [ ! $(grep -l "/usr/bin/chkfilelist" $CRON_FILE) ]; then
					echo "# Update fileslist" >> $CRON_FILE
					echo "0 */1 * * * /usr/bin/chkfilelist" >> $CRON_FILE
				fi
			fi
		;;
		boot)
			[ -d $BOOT_WWW_DIR ] && cp -a $BOOT_WWW_DIR $MAIN_WWW_DIR/$b
			#[ -d $REPOS_DIR/website/pics ] && ln -sf $REPOS_DIR/website/images $MAIN_WWW_DIR/$b/images
		;;
		tank)
			[ -d $TANK_WWW_DIR ] && cp -a $TANK_WWW_DIR $MAIN_WWW_DIR/$b
			[ -f /usr/share/awstats/extras/update ] && ln -sf /usr/share/awstats/extras/update /usr/sbin/awsupdate_all
			[ -d $REPOS_DIR/slitaz-forge/$b/files/etc/awstats ] && cp -a $REPOS_DIR/slitaz-forge/$b/files/etc/awstats/* /etc/awstats
			for i in $ADDRESS; do
				if [ -f /etc/awstats/awstats.$i.conf ]; then
					dirlog=$(grep ^DirData= /etc/awstats/awstats.$i.conf | cut -d "=" -f2 | sed -e 's/"//g')
					mkdir -p $dirlog
				fi
			done
			[ -d $MAIN_WWW_DIR/$b/images ] || mkdir -p $MAIN_WWW_DIR/$b/images
			[ -d $MAIN_WWW_DIR/$b/graphs/images/rrd ] || ln -sf $MAIN_WWW_DIR/graphs/images/rrd $MAIN_WWW_DIR/$b/images/rrd
			if [ -f /usr/share/awstats/extras/update ]; then
				if [ ! $(grep -l "/usr/share/awstats/extras/update" $CRON_FILE) ]; then
					echo "# Update Web stats" >> $CRON_FILE
					echo "*/5 * * * * /usr/share/awstats/extras/update" >> $CRON_FILE
				fi
			fi
			if [ -f /usr/bin/makegraphs ]; then
				[ -f $MAIN_WWW_DIR/graphs/makegraphs ] || cp -a /usr/bin/makegraphs $MAIN_WWW_DIR/graphs/makegraphs
				if [ ! $(grep -l "$MAIN_WWW_DIR/graphs/makegraphs" $CRON_FILE) ]; then
					echo "# Update system load graphics" >> $CRON_FILE
					echo "*/5 * * * * $MAIN_WWW_DIR/graphs/makegraphs" >> $CRON_FILE
				fi
			fi
		;;
		hg)
			[ -d $MAIN_WWW_DIR/hg ] || mkdir -p $MAIN_WWW_DIR/hg
			[ -d $REPOS_DIR/slitaz-dev-tools/slitaz-mercurial-style ] && cp -a $REPOS_DIR/slitaz-dev-tools/slitaz-mercurial-style/* $PYTHON_LIB/site-packages/mercurial
			[ -f /usr/share/examples/mercurial/hgwebdir.cgi ] && cp -a /usr/share/examples/mercurial/hgwebdir.cgi $MAIN_WWW_DIR/hg
			[ -f /usr/share/examples/mercurial/hgwebdir.cgi ] && cp -a /usr/share/examples/mercurial/hgwebdir.cgi $MAIN_WWW_DIR/hg/hgwebdir.py
			[ -f $REPOS_DIR/slitaz-forge/tank/files/etc/mercurial/hgweb.config ] && cp -a $REPOS_DIR/slitaz-forge/tank/files/etc/mercurial/hgweb.config /etc/mercurial
			[ -f $REPOS_DIR/slitaz-forge/tank/files/etc/mercurial/hgweb.config-mirror ] && cp -a $REPOS_DIR/slitaz-forge/tank/files/etc/mercurial/hgweb.config-mirror /etc/mercurial
			sed -i 's|/etc/mercurial/hgweb.config|/etc/mercurial/hgweb.config-mirror|g' $MAIN_WWW_DIR/hg/hgwebdir.py
			#[ -f /etc/mercurial/hgweb.conf ] && sed -i 's|style = slitaz|style = gitweb|g' /etc/mercurial/hgweb.config
		;;
		lfs)
			#[ -d $MAIN_WWW_DIR/lfs ] || ln -sf /usr/share/doc/lfs-book $MAIN_WWW_DIR/lfs ;;
			fake-website /usr/share/doc/lfs-book lfs.slitaz.org ;;
		hgbook)
			#if [ -d /usr/share/hgbook ]; then 
			#	[ -d $MAIN_WWW_DIR/hgbook ] || ln -sf /usr/share/hgbook $MAIN_WWW_DIR/hgbook
			#fi ;;
			fake-website /usr/share/hgbook hgbook.slitaz.org ;;
		absguide)
			#if [ -d /usr/share/absguide ]; then
			#	[ -d $MAIN_WWW_DIR/absguide ] || ln -sf /usr/share/absguide $MAIN_WWW_DIR/absguide
			#fi ;;
			fake-website /usr/share/absguide absguide.slitaz.org ;;
		man-html)
			#if [ -d /usr/share/man-html ]; then
			#	[ -d $MAIN_WWW_DIR/man-html ] || ln -sf /usr/share/man-html $MAIN_WWW_DIR/man-html
			#fi ;;
			fake-website /usr/share/man-html man-html.slitaz.org ;;
		gimp.en)
			#if [ -d /usr/share/gimp/2.0/help/en ]; then
			#	[ -d $MAIN_WWW_DIR/gimp_en ] || ln -sf /usr/share/gimp/2.0/help/en $MAIN_WWW_DIR/gimp_en
			#fi ;;
			fake-website /usr/share/gimp/2.0/help/en gimp.en.slitaz.org ;;
		gimp.fr)
			#if [ -d /usr/share/gimp/2.0/help/fr ]; then
			#	[ -d $MAIN_WWW_DIR/gimp_fr ] || ln -sf /usr/share/gimp/2.0/help/fr $MAIN_WWW_DIR/gimp_fr
			#fi ;;
			fake-website /usr/share/gimp/2.0/help/fr gimp.fr.slitaz.org ;;
		gimp.es)
			#if [ -d /usr/share/gimp/2.0/help/es ]; then
			#	[ -d $MAIN_WWW_DIR/gimp_es ] || ln -sf /usr/share/gimp/2.0/help/es $MAIN_WWW_DIR/gimp_es
			#fi ;;
			fake-website /usr/share/gimp/2.0/help/es gimp.es.slitaz.org ;;
		piratebox)
			cd $REPOS_DIR/piratebox
			hg update lighttpd
			cd $CUR_PWD
			if [ -d $REPOS_DIR/piratebox/piratebox/www ]; then
				cp -a $REPOS_DIR/piratebox/piratebox/www $MAIN_WWW_DIR/piratebox
			fi
			if [ -f $MAIN_WWW_DIR/piratebox/cgi-bin/data.pso ]; then
				chmod -R 777 $MAIN_WWW_DIR/piratebox/cgi-bin/data.pso
			fi
			if [ ! -d $MAIN_WWW_DIR/piratebox/share ]; then
				mkdir -p $MAIN_WWW_DIR/piratebox/share
				chmod -R 777 $MAIN_WWW_DIR/piratebox/share
			fi
			echo "<date>00:00:00</date>&nbsp;&nbsp;<name>PirateBox:</name>&nbsp;&nbsp;&nbsp;<data class='def'>Chat and share files anonymously!</data><br>" > $MAIN_WWW_DIR/piratebox/cgi-bin/data.pso
			;;
		linuxgazette)
			#if [ -d /repos/linuxgazette ]; then
			#	[ -d $MAIN_WWW_DIR/linuxgazette ] || ln -sf /repos/linuxgazette $MAIN_WWW_DIR/linuxgazette
			#fi ;;
			fake-website /repos/linuxgazette linuxgazette.net ;;
	esac
}

repo_setup() {
	local repo="$1"
	local contact="$2"
	local desc="$3"
	if [ ! -f $REPOS_DIR/$repo/.hg/hgrc-web ]; then
		touch $REPOS_DIR/$repo/.hg/hgrc-web
		cat "$REPOS_DIR/$repo/.hg/hgrc" >> $REPOS_DIR/$repo/.hg/hgrc-web
		echo "[web]" >> $REPOS_DIR/$repo/.hg/hgrc-web
		#[ -d $REPOS_DIR/$repo/.hg ] && echo "style = slitaz" >> $REPOS_DIR/$repo/.hg/hgrc-web
		echo "staticurl = http://hg.slitaz.org/static/" >> $REPOS_DIR/$repo/.hg/hgrc-web
		echo "push_ssl = false" >> $REPOS_DIR/$repo/.hg/hgrc-web
		echo "allow_push = *" >> $REPOS_DIR/$repo/.hg/hgrc-web
		#[ ! -f $REPOS_DIR/$repo/.hg/hgrc-pull ] && mv $REPOS_DIR/$repo/.hg/hgrc $REPOS_DIR/$repo/.hg/hgrc-pull
		cp -a $REPOS_DIR/$repo/.hg/hgrc-web $REPOS_DIR/$repo/.hg/hgrc
	fi
	if [ ! $(grep -l 'name = ' $REPOS_DIR/$repo/.hg/hgrc ) ]; then
		echo "name = "$repo"" >> $REPOS_DIR/$repo/.hg/hgrc
	fi
	if [ ! $(grep -l 'contact = ' $REPOS_DIR/$repo/.hg/hgrc ) ]; then
		echo "contact = $contact" >> $REPOS_DIR/$repo/.hg/hgrc
	fi
	if [ ! $(grep -l 'description = ' $REPOS_DIR/$repo/.hg/hgrc) ]; then
		echo "description = $desc" >> $REPOS_DIR/$repo/.hg/hgrc
	fi
}

repos() {
	for repo in $REPOS; do
		[ -d $REPOS_DIR/$repo ] || continue
		if [ -d $REPOS_DIR/$repo/.hg ]; then
			mkdir -p $REPOS_WEB_DIR/$repo
			[ -d $REPOS_WEB_DIR/$repo/.hg ] || ln -s $REPOS_DIR/$repo/.hg $REPOS_WEB_DIR/$repo/.hg
			if [ ! $(grep -l "$REPOS_WEB_DIR" /etc/mercurial/hgweb.config) ]; then
				[ -f /etc/mercurial/hgweb.config ] && sed -i "s|$REPOS_DIR|$REPOS_WEB_DIR|g" /etc/mercurial/hgweb.config
			fi
		fi
		pankso='Christophe Lincoln'
		bellard='Pascal Bellard'
		eric='Eric Joseph-Alexandre'
		godane='Christopher Rogers'
		
		[ "$repo" = "cookutils" ] && repo_setup "$repo" "$pankso" 'Utils to cook SliTaz packages'
		[ "$repo" = "my-cookutils" ] && repo_setup "$repo" "$godane" 'More powerful version of cookutils'
		[ "$repo" = "flavors" ] && repo_setup "$repo" "$pankso" 'SliTaz Cooking flavors'
		[ "$repo" = "flavors-stable" ] && repo_setup "$repo" "$bellard" 'SliTaz Stable flavors'
		[ "$repo" = "slitaz-base-files" ] && repo_setup "$repo" "$bellard" 'SliTaz base files'
		[ "$repo" = "spk" ] && repo_setup "$repo" "$pankso" 'SliTaz Package Toolkit'
		[ "$repo" = "slitaz-boot-scripts" ] && repo_setup "$repo" "$pankso" 'SliTaz boot scripts'
		[ "$repo" = "slitaz-configs" ] && repo_setup "$repo" "$pankso" 'SliTaz configuration files'
		[ "$repo" = "slitaz-dev-tools" ] && repo_setup "$repo" "$pankso" 'SliTaz Developers Tools'
		[ "$repo" = "slitaz-doc" ] && repo_setup "$repo" "$pankso" 'SliTaz system doc'
		[ "$repo" = "slitaz-doc-wiki-data" ] && repo_setup "$repo" "$godane" 'SliTaz documentation wiki content'
		[ "$repo" = "slitaz-forge" ] && repo_setup "$repo" "$eric" 'SliTaz Forge Config'
		[ "$repo" = "slitaz-modular" ] && repo_setup "$repo" "$godane" 'Scripts to make SliTaz Modular'
		[ "$repo" = "slitaz-pizza" ] && repo_setup "$repo" "$bellard" 'SliTaz Online flavor builder'
		[ "$repo" = "slitaz-tools" ] && repo_setup "$repo" "$pankso" 'SliTaz Tools and Tinyutils'
		[ "$repo" = "slitaz-vz" ] && repo_setup "$repo" "$eric" 'SliTaz OpenVZ integration'
		[ "$repo" = "sshfs" ] && repo_setup "$repo" "$pankso" 'SliTaz Secure File Storage'
		[ "$repo" = "tazlito" ] && repo_setup "$repo" "$bellard" 'SliTaz Live Tool'
		[ "$repo" = "tazpanel" ] && repo_setup "$repo" "$pankso" 'SliTaz Administration Panel'
		[ "$repo" = "tazpkg" ] && repo_setup "$repo" "$pankso" 'SliTaz Packages manager'
		[ "$repo" = "tazusb" ] && repo_setup "$repo" "$eric" 'SliTaz LiveUSB utility'
		[ "$repo" = "tazwok" ] && repo_setup "$repo" "$pankso" 'SliTaz Packages builder'
		[ "$repo" = "website" ] && repo_setup "$repo" "$pankso" 'SliTaz Website'
		[ "$repo" = "wok" ] && repo_setup "$repo" "$pankso" 'SliTaz Cooking wok'
		[ "$repo" = "wok-stable" ] && repo_setup "$repo" "$pankso" 'SliTaz Stable wok'
		[ "$repo" = "wok-tank" ] && repo_setup "$repo" "$godane" 'SliTaz Tank Mirror wok'
		[ "$repo" = "wok-tiny" ] && repo_setup "$repo" "$bellard" 'Tiny SliTaz wok'
		[ "$repo" = "wok-undigest" ] && repo_setup "$repo" "$pankso" 'SliTaz Undigest wok'
	done
}

up_src_links() {
	local i
	if [ -d $SRCDIR ]; then
		[ -d $MAIN_WWW_DIR/mirror/sources/packages ] && rm -rf $MAIN_WWW_DIR/mirror/sources/packages
		for i in $(ls $SRCDIR); do
			[ -d $MAIN_WWW_DIR/mirror/sources/packages/${i:0:1} ] || mkdir -p $MAIN_WWW_DIR/mirror/sources/packages/${i:0:1}
			[ -f $MAIN_WWW_DIR/mirror/sources/packages/${i:0:1}/$i ] || ln -sf $SRCDIR/$i $MAIN_WWW_DIR/mirror/sources/packages/${i:0:1}/$i
		done
	fi
	[ -f /usr/bin/chkfilelist ] && /usr/bin/chkfilelist
	local rel="stable cooking"
	for i in $rel; do
		if [ -d $MAIN_WWW_DIR/mirror/packages/$i ]; then
			echo -n "" > $MAIN_WWW_DIR/mirror/packages/$i/.filelist
			chown www.www $MAIN_WWW_DIR/mirror/packages/$i/.filelist
			echo -n "" > $MAIN_WWW_DIR/mirror/packages/$i/.folderlist
			chown www.www $MAIN_WWW_DIR/mirror/packages/$i/.folderlist
		fi
	done
}

case "$COMMAND" in 
	start|on|tank-only|mirror-only)
		[ -d $MAIN_WWW_DIR/mirror-info ] && WWW="${WWW/mirror /}"
		for c in $WWW; do
			if [ ! -d $MAIN_WWW_DIR/$c ]; then
				www $c
				[ "$c" = "hg" ] && repos
			fi
		done
		#echo "127.0.0.1 localhost $(cat /etc/hostname)" > /etc/hosts
		[ "$IP_ADDR" == "127.0.0.1" ] && echo "127.0.0.1 tazpanel.slitaz.org" >> /etc/hosts
		for hostname in $ADDRESS; do
				if [ "$hostname" = "www.slitaz.org" ]; then
					echo "$IP_ADDR $hostname slitaz.org" >> /etc/hosts
				elif [ "$hostname" = "pro.slitaz.org" ]; then
					echo "$IP_ADDR $hostname slitaz.pro" >> /etc/hosts
				else
					echo "$IP_ADDR $hostname" >> /etc/hosts
				fi
		done
		if [ ! -L /usr/share/awstats/icon/other/slitaz-spider-48x48.png ]; then
			ln -s $REPOS_DIR/website/images/artwork/slitaz-spider-48x48.png /usr/share/awstats/icon/other/slitaz-spider-48x48.png
		fi
		if [ "$IP_ADDR" != "127.0.0.1" ]; then
			if [ ! $(grep -l "dhcp-option=option:router,$ROUTER_IP" /etc/dnsmasq.conf) ]; then
				echo "$IP_ADDR tazpanel tazpanel.slitaz.org" >> /etc/hosts
				echo "dhcp-option=option:router,$ROUTER_IP" >> /etc/dnsmasq.conf
			fi
		fi
		if [ -d "$SLITAZ_HOME/$version/packages" ]; then
			echo "$SLITAZ_HOME/$version/packages" > $LOCALSTATE/mirror
		fi
		if [ "$COMMAND" = "tank-only" ]; then
			[ -f $VHOST_TANK_FILE ] && ln -sf $VHOST_TANK_FILE /etc/lighttpd/vhosts.conf
		elif [ "$COMMAND" = "mirror-only" ]; then
			[ -f $VHOST_MIRROR_FILE ] && ln -sf $VHOST_MIRROR_FILE /etc/lighttpd/vhosts.conf
		else
			[ -f $VHOST_FILE ] && ln -sf $VHOST_FILE /etc/lighttpd/vhosts.conf
		fi
		[ -d $MAIN_WWW_DIR/graphs/images/rrd ] || mkdir -p $MAIN_WWW_DIR/graphs/images/rrd
		chown -R www.www $MAIN_WWW_DIR
		up_src_links		
		[ -x /etc/init.d/lighttpd ] && /etc/init.d/lighttpd start
		[ -x /etc/init.d/crond ] && /etc/init.d/crond start
		;;
	update-repos)
		pwd=$(pwd)
		for i in $(ls $REPOS_DIR); do
			if [ -d $REPOS_DIR/$i/.hg ]; then
				cd $REPOS_DIR/$i
				echo "Updaing $i repo..."
				hg pull -u
			fi
		done
		cd $pwd
		;;
	up-src-links)
		up_src_links
		;;
	backup-mirror|-bm)
		case "$2" in
			pkgs-dry-push)
				rsync -avrtlz --delete --dry-run $PKGDIR ${sync_mirror} ;;
			src-dry-push)
				rsync -avrtlz --delete --dry-run $SRCDIR ${sync_mirror} ;;
			repos-dry-push)
				rsync -avrtlz --delete --dry-run $REPOS_DIR ${sync_mirror} ;;
			pkgs-push)
				rsync -avrtlz --delete $PKGDIR ${sync_mirror} ;;
			src-push)
				rsync -avrtlz --delete $SRCDIR ${sync_mirror} ;;
			repos-push)
				rsync -avrtlz --delete $REPOS_DIR ${sync_mirror} ;;
			pkgs-dry-pull)
				rsync -avrtlz --delete --dry-run ${sync_mirror}${PKGDIR} $(dirname ${PKGDIR}) ;;
			src-dry-pull)
				rsync -avrtlz --delete --dry-run ${sync_mirror}${SRCDIR} $(dirname ${SRCDIR}) ;;
			repos-dry-pull)
				rsync -avrtlz --delete --dry-run ${sync_mirror}${REPOS_DIR} $(dirname ${REPOS_DIR}) ;;
			pkgs-pull)
				rsync -avrtlz --delete ${sync_mirror}${PKGDIR} $(dirname ${PKGDIR}) ;;
			src-pull)
				rsync -avrtlz --delete ${sync_mirror}${SRCDIR} $(dirname ${SRCDIR}) ;;
			repos-pull)
				rsync -avrtlz --delete ${sync_mirror}${REPOS_DIR} $(dirname ${REPOS_DIR}) ;;
			*)
				echo "$0 backup-mirror pkgs-dry-{push|pull}"
				echo "$0 backup-mirorr pkgs-{push|pull}"
				echo "$0 backup-mirror src-dry-{push|pull}"
				echo "$0 backup-mirror src-{push|pull}"
				echo "$0 backup-mirror repos-dry-{push|pull}"
				echo "$0 backup-mirror repos-{push|pull}" ;;
		esac ;;
	off|stop)
		[ -x /etc/init.d/lighttpd ] && /etc/init.d/lighttpd stop
		[ -x /etc/init.d/crond ] && /etc/init.d/crond stop
		echo "127.0.0.1 localhost $(cat /etc/hostname) tazpanel" > /etc/hosts
		exit 1
		;;
	*)
		usage
		;;
esac
